{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>\ud83d\ude80 The ultimate linter and formatter for removing unused import statements in your code.</p> <p>Looking for a way to eliminate those pesky unused import statements in your code? Look no further than Unimport! This powerful tool serves as both a linter and formatter, making it easy to detect and remove any imports that are no longer needed. Say goodbye to cluttered, inefficient code and hello to a cleaner, more streamlined development process with Unimport.</p> <p> </p> <p> </p> <p> </p> <p> </p> <ul> <li>Documentation https://unimport.hakancelik.dev/</li> <li>Issues https://github.com/hakancelikdev/unimport/issues/</li> <li>Changelog https://unimport.hakancelik.dev/1.0.1/CHANGELOG/</li> <li>Playground https://playground-unimport.hakancelik.dev/</li> </ul>"},{"location":"AUTHORS/","title":"Authors","text":""},{"location":"AUTHORS/#authors","title":"Authors","text":"<ul> <li>Hakan \u00c7elik (@hakancelikdev) hakancelikdev@gmail.com</li> <li>Batuhan Ta\u015fkaya (@isidentical) isidentical@gmail.com</li> <li>G\u00f6kmen G\u00f6rgen (@gkmngrgn) gkmngrgn@gmail.com</li> </ul>"},{"location":"AUTHORS/#contributors","title":"Contributors","text":"<ul> <li>Benjamin Schubert (@BenjaminSchubert) contact@benschubert.me</li> <li>C.A.M. Gerlach (@CAM-Gerlach) CAM.Gerlach@Gerlach.CAM</li> <li>Drew Winstel (@drewbrew) drew@hsv.beer</li> <li>Furkan \u00d6nder (@furkanonder) furkanonder@protonmail.com</li> <li>Hadi Alqattan (@hadialqattan) alqattanhadizaki@gmail.com</li> <li>I\u015f\u0131k Kaplan (@isik-kaplan) isik.kaplan@outlook.com</li> <li>Sema Karata\u015f (@semakaratas) semakaratas@outlook.com.tr</li> <li>S\u00fcmeyye Boynukara (@sumeyyeboynukara) sumeyyeboynukara@gmail.com</li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"CHANGELOG/#unreleased-yyyy-mm-dd","title":"[Unreleased] - YYYY-MM-DD","text":""},{"location":"CHANGELOG/#101-2023-11-17","title":"[1.0.1] - 2023-11-17","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Implement <code>strtobool</code> function (and remove distutils dependency)   #297</li> </ul>"},{"location":"CHANGELOG/#100-2023-07-07","title":"[1.0.0] - 2023-07-07","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Automatically pick up config options from setup.cfg if it is present in the project   root else check and if it exists use pyproject.toml.   #256</li> </ul> <p>If you want you can disable this feature by passing <code>--disable-auto-discovery-config</code></p> <ul> <li>Add github-action #229</li> <li>Add support like command line commands in configuration files. #287</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>ignore-init setting is not working from command line call   #263</li> <li>Running without options or a config file   #281</li> <li>Attribute as import refactor #284</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Raise more human-readable exceptions when the key is mistyped in the configuration   #286</li> </ul>"},{"location":"CHANGELOG/#0161-2023-07-05","title":"[0.16.1] - 2023-07-05","text":""},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Fix: ignore-init setting is not working from command line call   #263</li> </ul>"},{"location":"CHANGELOG/#0160-2023-04-04","title":"[0.16.0] - 2023-04-04","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Add support like command line commands in configuration files. #287</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Raise more human-readable exceptions when the key is mistyped in the configuration.   #286</li> </ul>"},{"location":"CHANGELOG/#0150-2023-03-31","title":"[0.15.0] - 2023-03-31","text":""},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Fix: attribute as import refactor #284</li> </ul>"},{"location":"CHANGELOG/#0141-2023-02-04","title":"[0.14.1] - 2023-02-04","text":""},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>Running without options or a config file #281.</li> </ul>"},{"location":"CHANGELOG/#0140-2023-02-03","title":"[0.14.0] - 2023-02-03","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Automatically pick up config options from setup.cfg if it is present in the project   root else check and if it exists use pyproject.toml. #256</li> </ul> <p>If you want you can disable this feature by passing <code>--disable-auto-discovery-config</code></p>"},{"location":"CHANGELOG/#0130-2023-02-01","title":"[0.13.0] - 2023-02-01","text":""},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>The remove command is set to the default behavior. #273</li> </ul>"},{"location":"CHANGELOG/#fixes","title":"Fixes","text":"<ul> <li>pre-commit autoupdate yields a weird result #275</li> </ul>"},{"location":"CHANGELOG/#0123-2022-12-04","title":"[0.12.3] - 2022-12-04","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Multiple versions of the docs</li> </ul>"},{"location":"CHANGELOG/#0122-2022-11-09","title":"[0.12.2] - 2022-11-09","text":""},{"location":"CHANGELOG/#fixes_1","title":"\ud83d\udc1b Fixes","text":"<ul> <li><code>--color=never</code> is now respected when showing the diffs</li> </ul>"},{"location":"CHANGELOG/#0121","title":"0.12.1","text":""},{"location":"CHANGELOG/#fixes_2","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Changelog url PR #250</li> <li>Name Error PR #250</li> </ul>"},{"location":"CHANGELOG/#0120","title":"0.12.0","text":""},{"location":"CHANGELOG/#features","title":"\ud83d\udd25 Features","text":"<ul> <li>Add if condition analysis and \ud83e\uddea Refactor PR #247</li> </ul> <p>For example;</p> <pre><code>import sys\n\nif sys.version_info &gt;= (3, 8):\n    from typing import Literal\nelse:\n    from typing_extensions import Literal\n</code></pre> <ul> <li>setup.py remove and pyproject.toml was added. PR #245</li> </ul>"},{"location":"CHANGELOG/#0113","title":"0.11.3","text":""},{"location":"CHANGELOG/#fixes_3","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Fix main.py to run unimport</li> </ul>"},{"location":"CHANGELOG/#0112","title":"0.11.2","text":""},{"location":"CHANGELOG/#fixes_4","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Re complile fail mentioning \u2018ps_d\u2019 when using \u2013gitignore PR #241</li> </ul>"},{"location":"CHANGELOG/#internal","title":"Internal","text":"<p>For Python 3.7 and above</p> <ul> <li>Drop support for patspec, 0.5.0 above and below 0.10.0 versions.</li> <li>Only 0.10.0 and above versions are supported, in these versions the gitignore   parameter works more accurately.</li> <li>For more accurate results when using \u2013gitignore parameter, please do not use Python   3.6 and Windows.</li> </ul>"},{"location":"CHANGELOG/#docs","title":"\ud83d\udcdd Docs","text":"<ul> <li>Docs update</li> </ul>"},{"location":"CHANGELOG/#internal_1","title":"Internal","text":"<ul> <li>Refactor main.py and add tests PR #238</li> </ul>"},{"location":"CHANGELOG/#0111","title":"0.11.1","text":""},{"location":"CHANGELOG/#fixes_5","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Setup</li> </ul>"},{"location":"CHANGELOG/#0110","title":"0.11.0","text":""},{"location":"CHANGELOG/#docs_1","title":"\ud83d\udcdd Docs","text":"<ul> <li>Update docs</li> </ul>"},{"location":"CHANGELOG/#deprecated","title":"Deprecated","text":"<ul> <li>Remove requirements feature PR #234 <p>This feature alone is not enough and can be developed as a new project using unimport, it should not be a feature of unimport.</p> </li> </ul>"},{"location":"CHANGELOG/#0100","title":"0.10.0","text":""},{"location":"CHANGELOG/#fixes_6","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Configurations flow PR #230</li> <li>Exit code behavior PR #225</li> </ul>"},{"location":"CHANGELOG/#internal_2","title":"Internal","text":"<ul> <li>\ud83d\udd25 Support Github action PR #231</li> </ul>"},{"location":"CHANGELOG/#096","title":"0.9.6","text":""},{"location":"CHANGELOG/#internal_3","title":"Internal","text":"<ul> <li>3.10+ Support \ud83d\udd25 PR #26</li> </ul>"},{"location":"CHANGELOG/#095","title":"0.9.5","text":""},{"location":"CHANGELOG/#fixes_7","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Refactor: tests using pytest, fix check method PR #208</li> </ul>"},{"location":"CHANGELOG/#094","title":"0.9.4","text":""},{"location":"CHANGELOG/#fixes_8","title":"\ud83d\udc1b Fixes","text":"<ul> <li>i199 Refactor options &amp; commands &amp; Option color output PR #205</li> </ul>"},{"location":"CHANGELOG/#internal_4","title":"Internal","text":"<ul> <li>\ud83d\udd25 Build an Docker image PR #202</li> </ul>"},{"location":"CHANGELOG/#092","title":"0.9.2","text":""},{"location":"CHANGELOG/#fixes_9","title":"\ud83d\udc1b Fixes","text":"<ul> <li>setup.py</li> </ul>"},{"location":"CHANGELOG/#091","title":"0.9.1","text":""},{"location":"CHANGELOG/#fixes_10","title":"\ud83d\udc1b Fixes","text":"<ul> <li>EOLs not being respected in modified files per PR #193</li> <li>Respect the file\u2019s current EOL (LF/CRLF) instead of the platform default</li> <li>Add unit and integration tests that EOLs are respected</li> </ul>"},{"location":"CHANGELOG/#090","title":"0.9.0","text":""},{"location":"CHANGELOG/#features_1","title":"\ud83d\udd25 Features","text":"<ul> <li>Scope analyzer PR #189</li> <li>Scope analyzer</li> <li>Duplicate import feature has been enabled again.</li> </ul>"},{"location":"CHANGELOG/#fixes_11","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Adding unnecessary rpar in vertical style PR #191</li> </ul> <p>\u0130nput</p> <pre><code>import sys\nfrom typing import (\n    List,\n)\n\ntest_list: List[str] = [\"spam\", \"eggs\"]\n</code></pre> <p>Output</p> <pre><code>from typing import (\n  List,\n\n)\n\ntest_list: List[str] = [\"spam\", \"eggs\"]\n</code></pre>"},{"location":"CHANGELOG/#084","title":"0.8.4","text":""},{"location":"CHANGELOG/#fixes_12","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Emoji issues PR #185</li> </ul>"},{"location":"CHANGELOG/#080","title":"0.8.0","text":"<ul> <li>\ud83d\udc4e Temporarily drop support for duplicate imports. Commit -&gt;   35fa7239019fc4b4a68c98d3bde64f0302c367f6</li> </ul>"},{"location":"CHANGELOG/#074","title":"0.7.4","text":""},{"location":"CHANGELOG/#fixes_13","title":"\ud83d\udc1b Fixes","text":"<ul> <li>list_paths in utils PR #172</li> </ul>"},{"location":"CHANGELOG/#073","title":"0.7.3","text":""},{"location":"CHANGELOG/#features_2","title":"\ud83d\udd25 Features","text":"<ul> <li>Add <code>--ignore-init</code> flag PR #169</li> </ul>"},{"location":"CHANGELOG/#072","title":"0.7.2","text":""},{"location":"CHANGELOG/#features_3","title":"\ud83d\udd25 Features","text":"<ul> <li>Python3.9 Support PR #166</li> </ul>"},{"location":"CHANGELOG/#071","title":"0.7.1","text":""},{"location":"CHANGELOG/#fixes_14","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Fix PR #161</li> </ul>"},{"location":"CHANGELOG/#070","title":"0.7.0","text":""},{"location":"CHANGELOG/#features_4","title":"\ud83d\udd25 Features","text":"<ul> <li>Star import more accurate suggestion PR #158</li> </ul>"},{"location":"CHANGELOG/#internal_5","title":"Internal","text":"<ul> <li>%15 performance increase &amp; remove show-error flag PR #159</li> </ul>"},{"location":"CHANGELOG/#fixes_15","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Fix: scanner PR #157</li> <li>PR #155</li> <li>Configuration Bug Fix ( Configuration priority, reading and merge )</li> <li>%136 - %150 performance increase</li> </ul>"},{"location":"CHANGELOG/#068","title":"0.6.8","text":""},{"location":"CHANGELOG/#fixes_16","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Extra type check on <code>utils.is_std</code>, Commit   b9e226ef18984189b4154b739b9b186a2c7a2418</li> <li>Import skip PR #147</li> </ul>"},{"location":"CHANGELOG/#066","title":"0.6.6","text":""},{"location":"CHANGELOG/#features_5","title":"\ud83d\udd25 Features","text":"<ul> <li>Support multiline skip import only py3.8 and plus PR #138</li> <li>Support type variable PR #128</li> <li>Support Windows OS coloring and encoding PR #116</li> </ul>"},{"location":"CHANGELOG/#fixes_17","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Call attribute scanner PR #145</li> <li>Requirements feature &amp; star import suggestion PR #142</li> <li>Initial imports from sys.modules PR #136</li> <li>Import and name matcher PR #133</li> <li>Type comment PR #130</li> <li>Same line duplicates PR #125</li> </ul>"},{"location":"CHANGELOG/#030","title":"0.3.0","text":""},{"location":"CHANGELOG/#features_6","title":"\ud83d\udd25 Features","text":"<ul> <li>Configuration extend and refactoring PR #111</li> <li>General refactoring PR #108</li> <li>Support append and extend <code>__all__</code> list</li> <li>Star import suggestions improved</li> <li>Support .gitignore exclude patterns PR #102</li> <li>Support async def Issue #92</li> </ul>"},{"location":"CHANGELOG/#fixes_18","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Improve: Names, Imports and star suggestion PR #112</li> <li>Unnecessary refactoring PR #107</li> </ul>"},{"location":"CHANGELOG/#internal_6","title":"Internal","text":"<ul> <li>Optimize Python &gt;=3.8 type comments support method PR #95</li> <li>Improve test coverage PR #93</li> </ul>"},{"location":"CHANGELOG/#0210","title":"0.2.10","text":""},{"location":"CHANGELOG/#features_7","title":"\ud83d\udd25 Features","text":"<ul> <li>Getting rid of some bad practice &amp; Fix: pre-commit bug   bd93a0cf6b1d5d27bf6a669f2a029faaf225ae5f</li> </ul>"},{"location":"CHANGELOG/#fixes_19","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Vertical style issue PR #86</li> </ul> <pre><code>from foo import (\n    Foo,\n    Bar,\n    FooBar,\n)\nFoo, Bar\n</code></pre> <ul> <li>More than one star import exist on the same file. Commit   46e585044f690413c198ac7f356f9a5ef21597bc</li> </ul>"},{"location":"CHANGELOG/#029","title":"0.2.9","text":""},{"location":"CHANGELOG/#features_8","title":"\ud83d\udd25 Features","text":"<ul> <li>Support for exit code and add some enhancement PR #81</li> </ul>"},{"location":"CHANGELOG/#fixes_20","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Double underscore in builtins imports PR #82</li> <li>Incorrect matching import and name PR #78</li> </ul>"},{"location":"CHANGELOG/#028","title":"0.2.8","text":""},{"location":"CHANGELOG/#features_9","title":"\ud83d\udd25 Features","text":"<ul> <li>Support: file-wide skips PR #77</li> <li>Now, you can skip a file by typing <code># unimport: skip_file</code> anywhere in that file.</li> <li>Support: requirements.txt file PR #75</li> <li>Now, You can automatically delete unused modules from the requirements.txt file (     <code>unimport --requirements --remove</code>), see the difference (     <code>unimport --requirements --diff</code>), delete it by requesting permission (     <code>unimport --requirements --permission</code>), or just check ( <code>unimport --requirements</code>).</li> <li>Support for type hints (#58) &amp; string typing PR #71</li> </ul> <pre><code>from typing import List, TYPE_TEST\ntest: 'List[TYPE_TEST]'\n</code></pre> <pre><code>from typing import List, TYPE_TEST\ntest: \"List['TYPE_TEST']\"\n</code></pre>"},{"location":"CHANGELOG/#fixes_21","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Preserve import styles PR #76</li> <li>Match error between import name and name PR #74</li> <li>get_suggestion_modules function fix for <code>__all__</code> name when import is star PR #64</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#development-and-contributing","title":"Development and Contributing","text":""},{"location":"CONTRIBUTING/#issue","title":"Issue","text":"<p>To make an improvement, add a new feature or anything else, please open a issue first.</p> <p>Good first issues are the issues that you can quickly solve, we recommend you take a look. Good first issue</p>"},{"location":"CONTRIBUTING/#fork-repository","title":"Fork Repository","text":"<p>fork the unimport.</p>"},{"location":"CONTRIBUTING/#clone-repository","title":"Clone Repository","text":"<pre><code>$ git clone git@github.com:&lt;USERNAME&gt;/unimport.git\n$ cd unimport\n</code></pre>"},{"location":"CONTRIBUTING/#setup-branch","title":"Setup Branch","text":"<pre><code>git checkout -b i{your issue number}\n</code></pre>"},{"location":"CONTRIBUTING/#how-to-update-my-local-repository","title":"How to Update My Local Repository","text":"<pre><code>$ git remote add upstream git@github.com:hakancelikdev/unimport.git\n$ git fetch upstream # or git fetch --all\n$ git rebase upstream/main\n</code></pre>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>Firstly make sure you have py3.6, py3.7, py3.8, py3.9 and py3.10 python versions installed on your system.</p> <p>After typing your codes, you should run the tests by typing the following command.</p> <pre><code>$ python3.10 -m pip install tox\n$ tox\n</code></pre> <p>If all tests pass.</p>"},{"location":"CONTRIBUTING/#the-final-step","title":"The final step","text":"<p>After adding a new feature or fixing a bug please report your change to CHANGELOG.md and write your name, GitHub address, and email in the AUTHORS.md file in alphabetical order.</p>"},{"location":"CONTRIBUTING/#license","title":"License","text":"<p>Unimport is MIT licensed, as found in the LICENSE file.</p>"},{"location":"FAQ/","title":"FAQ","text":""},{"location":"FAQ/#faq","title":"FAQ","text":""},{"location":"FAQ/#differences-between-autoflake-and-unimport","title":"Differences between Autoflake and Unimport","text":"<ul> <li>Autoflake doesn\u2019t always remove the duplicate imports when they are on separate lines.</li> </ul> <p>Example:</p> <pre><code>from os import walk\nfrom os import walk\n\nuse(walk)\n</code></pre> <p>For this snippet, autoflake doesn\u2019t change anything, while unimport detects and removes the first walk import.</p> <ul> <li>Autoflake replaces unused imports in compound statements with <code>pass</code>, while unimport   detects and imports inside compound statements, if it detects that you are expecting   an <code>ImportError</code>, it doesn\u2019t remove that particular import.</li> </ul> <pre><code>try:\n    from x import y\nexcept ImportError:\n    ...\n</code></pre> <p>For this snippet autoflake replaces the import statement with <code>pass.</code>, while unimport leaves it as is.</p> <ul> <li>Autoflake is not accurate when it comes to star import expansions, while unimport can   detect and expand them accurately.</li> </ul> <pre><code>from math import *\n\nuse(RANDOM_VAR)\n</code></pre> <p>Running autoflake with \u2013expand-star-import flag on the snippet above turns it into</p> <pre><code>from math import RANDOM_VAR\n</code></pre> <p>while unimport simple removes the math import because it is not used.</p> <ul> <li>Autoflake doesn\u2019t work with multiple star imports, while unimport does.</li> </ul> <p>from math import _ from os import _</p> <p>use(walk, cos)</p> <p>Running unimport on the above snippet with \u2013include-star-imports flag produces the correct output.</p> <pre><code>from math import cos\nfrom os import walk\n\nuse(walk, cos)\n</code></pre> <p>while autoflake simply ignores them.</p> <ul> <li>Our outputs are more useful, try using our \u2013check, \u2013diff or \u2013permission commands.</li> </ul>"},{"location":"FAQ/#performance","title":"Performance","text":"<p>Unimport &lt; 0.6.8 was much slower than Autoflake == 1.4 (current latest version as of writing this) but Unimport &gt; 0.6.8 is slightly faster.</p>"},{"location":"FAQ/#reasons-to-choose-autoflake","title":"Reasons to choose autoflake","text":"<ul> <li>It is faster. When tested, autoflake is 1-4x faster on average. (Unimport is   slightly faster now)</li> <li>It removes unused variables which unimport doesn\u2019t support, and is not planning to.</li> <li>Has a feature that removes duplicate keys on objects.</li> </ul>"},{"location":"FAQ/#reasons-to-choose-unimport","title":"Reasons to choose unimport","text":"<ul> <li>It does more static analysis to increase the accuracy of choosing the correct imports   to remove.</li> <li>Can handle star imports more accurately.(https://github.com/myint/autoflake/pull/18   describes their approach)</li> <li>Works with multiple star imports.</li> <li>Removes duplicate imports.</li> <li>Has skip_file feature that allows one to skip an entire file.</li> <li>Allows configuration via pyproject.toml and setup.cfg files.</li> </ul>"},{"location":"FAQ/#overall","title":"Overall","text":"<p>Even though unimport and autoflake has features that are similar, they are not designed to do the same thing. When you are including one to your project, it is a good idea to know what your needs are, and decide accordingly.</p>"},{"location":"FAQ/#i-can-already-do-this-with-many-ides-why-should-i-use-unimport","title":"I can already do this with many IDEs, why should I use Unimport?","text":""},{"location":"FAQ/#short-answer","title":"Short answer","text":"<p>Not everyone works with IDEs and not all IDEs work in all environments.</p>"},{"location":"FAQ/#long-answer","title":"Long answer","text":"<p>Imagine that you are working with a team where everyone may not have the same coding environment. For instance, not everyone uses PyCharm or VSCode. In such a scenario, if you want to apply certain standards, you can use pre-commit. It can be helpful. Furthermore, if you want to ensure that unnecessary imports are removed before committing, you should use Unimport with pre-commit. Let\u2019s assume that you want to ensure that there are no unnecessary imports in your entire project. In that case, Unimport will help you achieve this goal.</p>"},{"location":"installation/","title":"Installation","text":"<p>Unimport requires Python 3.6+ and can be easily installed using most common Python packaging tools. We recommend installing the latest stable release from PyPI with pip:</p> <pre><code>$ pip install unimport\n</code></pre>"},{"location":"tutorial/command-line-options/","title":"Command line options","text":"<p>You can list many options by running unimport \u2013help</p> <pre><code>usage: unimport [-h] [--color {auto,always,never}] [--check] [-c PATH] [--disable-auto-discovery-config] [--include include] [--exclude exclude] [--gitignore] [--ignore-init]\n[--include-star-import] [-d] [-r | -p] [-v]\n[sources ...]\n\nA linter, formatter for finding and removing unused import statements.\n\npositional arguments:\n  sources               Files and folders to find the unused imports.\n\noptions:\n  -h, --help            show this help message and exit\n--color {auto,always,never}\nSelect whether to use color in the output. Defaults to `auto`.\n  --check               Prints which file the unused imports are in.\n  -c PATH, --config PATH\n                        Read configuration from PATH.\n  --disable-auto-discovery-config\n                        Automatically pick up config options from setup.cfg if it is present in the project root else check and if it exists use pyproject.toml.\n  --include include     File include pattern.\n  --exclude exclude     File exclude pattern.\n  --gitignore           Exclude .gitignore patterns. if present.\n  --ignore-init         Ignore the __init__.py file.\n  --include-star-import\n                        Include star imports during scanning and refactor.\n  -d, --diff            Prints a diff of all the changes unimport would make to a file.\n  -r, --remove          Remove unused imports automatically.\n  -p, --permission      Refactor permission after see diff.\n  -v, --version         Prints version of unimport\n\nGet rid of all unused imports \ud83e\udd73\n</code></pre>"},{"location":"tutorial/command-line-options/#sources","title":"Sources","text":"<p>(optional: default <code>the file directory you are in</code>) -&gt; <code>Path(\".\")</code></p> <p>You can give as many file or directory paths as you want.</p> <p>Usage</p> <ul> <li><code>$ unimport</code></li> <li><code>$ unimport example</code></li> <li><code>$ unimport example example1 example2 example/example.py</code></li> </ul>"},{"location":"tutorial/command-line-options/#check","title":"Check","text":"<p>(optional: default <code>False</code>) Prints which file the unused imports are in.</p> <p>Usage</p> <ul> <li><code>$ unimport</code></li> <li><code>$ unimport --check</code></li> <li><code>$ unimport --check --diff</code></li> <li><code>$ unimport --check --remove</code></li> </ul>"},{"location":"tutorial/command-line-options/#config","title":"Config","text":"<p>(optional: default <code>the file directory you are in</code>) -&gt; <code>Path(\".\")</code></p> <p>Read configuration from PATH</p> <p>Usage</p> <ul> <li><code>$ unimport --config path/to/pyproject.toml</code></li> </ul>"},{"location":"tutorial/command-line-options/#disable-auto-discovery-config","title":"Disable auto discovery config","text":"<p>(optional: default <code>False</code>)</p> <p>Automatically pick up config options from setup.cfg if it is present in the project root else check and if it exists use pyproject.toml.</p> <p>Usage</p> <ul> <li><code>$ unimport --disable-auto-discovery-config</code></li> </ul>"},{"location":"tutorial/command-line-options/#include","title":"Include","text":"<p>(optional: default \u2018\\.(py)$\u2019) file include pattern</p> <p>Usage</p> <ul> <li><code>$ unimport --include mypackage</code></li> <li><code>$ unimport --include \"mypackage|tests</code></li> </ul>"},{"location":"tutorial/command-line-options/#exclude","title":"Exclude","text":"<p>(optional: default \u2018^$\u2019) file exclude pattern</p> <p>Usage</p> <ul> <li><code>$ unimport --exclude __init__.py</code></li> <li><code>$ unimport --exclude \"__init__.py|tests|.tox</code></li> </ul>"},{"location":"tutorial/command-line-options/#gitignore","title":"Gitignore","text":"<p>(optional: default <code>False</code>)</p> <p>It\u2019s possible to skip <code>.gitignore</code> glob patterns.</p> <p>Usage</p> <ul> <li><code>$ unimport --gitignore</code></li> </ul> <p>Warning:</p> <p>For more accurate results when using <code>--gitignore</code> parameter, please do not use Python 3.6 and Windows. For more information, please visit -&gt; https://github.com/hakancelikdev/unimport/issues/240</p>"},{"location":"tutorial/command-line-options/#ignore-init","title":"Ignore init","text":"<p>(optional: default <code>False</code>)</p> <p>Ignore the init.py file.</p> <p>Usage</p> <ul> <li><code>$ unimport --ignore-init</code></li> </ul>"},{"location":"tutorial/command-line-options/#include-star-import","title":"Include star import","text":"<p>(optional: default <code>False</code>) Include star imports during scanning and refactor.</p> <p>Usage</p> <ul> <li><code>$ unimport --include-star-import</code></li> </ul>"},{"location":"tutorial/command-line-options/#diff","title":"Diff","text":"<p>(optional: default <code>False</code>) Prints a diff of all the changes unimport would make to a file.</p> <p>Usage</p> <ul> <li><code>$ unimport -d</code></li> <li><code>$ unimport --diff</code></li> </ul>"},{"location":"tutorial/command-line-options/#remove","title":"Remove","text":"<p>(optional: default <code>False</code>) remove unused imports automatically.</p> <p>When the <code>--diff</code> and <code>--check</code> flags are not used, the <code>--remove</code> flag set as <code>True</code> If you still want to remove the imports, use the <code>--remove</code> flag.</p> <p>Usage</p> <ul> <li><code>$ unimport -r</code></li> <li><code>$ unimport --remove</code></li> </ul>"},{"location":"tutorial/command-line-options/#permission","title":"Permission","text":"<p>(optional: default <code>False</code>) Refactor permission after seeing the diff.</p> <p>Usage</p> <ul> <li><code>$ unimport -p</code></li> <li><code>$ unimport --permission</code></li> </ul>"},{"location":"tutorial/command-line-options/#color","title":"Color","text":"<p>(optional: default <code>auto</code>) choices: (always, never, auto)</p> <p>Select whether to use color in the output.</p> <p>Usage</p> <ul> <li><code>unimport --color always</code></li> <li><code>unimport --color never</code></li> <li><code>unimport --color auto</code></li> </ul>"},{"location":"tutorial/configurations/","title":"Configurations","text":"<p>It\u2019s possible to configure unimport from <code>pyproject.toml</code> or <code>setup.cfg</code> files if you have.</p> <p>Automatically pick up config options from setup.cfg if it is present in the project root else check and if it exists use pyproject.toml.</p> <p>If you want you can disable this feature by passing <code>--disable-auto-discovery-config</code> or you can pass the path to the configuration file by passing <code>--config path/to/pyproject.toml</code>.</p> <p>For example:</p> <p>pyproject.toml</p> <pre><code>[tool.unimport]\nsources = [\"path1\", \"path2\"]\nexclude = '__init__.py|tests/'\ninclude = 'test|test2|tests.py'\ngitignore = true\nremove = false\ncheck = true\ndiff = true\ninclude_star_import = true\nignore_init = true\n</code></pre> <p>setup.cfg</p> <pre><code>[unimport]\nsources = [\"path1\", \"path2\"]\nexclude = __init__.py|tests/\ninclude = test|test2|tests.py\ngitignore = true\nremove = false\ncheck = true\ndiff = true\ninclude_star_import = true\nignore_init = true\n</code></pre>"},{"location":"tutorial/configurations/#manage-like-cli-in-configuration","title":"Manage like CLI in configuration","text":"<pre><code>[tool.unimport]\ninclude-star-import = true\nignore-init = true\n</code></pre> <p>setup.cfg</p> <pre><code>[unimport]\ninclude-star-import = true\nignore-init = true\n</code></pre>"},{"location":"tutorial/other-useful-features/","title":"Other useful features","text":""},{"location":"tutorial/other-useful-features/#skip-import","title":"Skip Import","text":"<p>Leave \u2018# unimport: skip\u2019 or \u2018# noqa\u2019 at the end of the line to skip imports for example:</p> <pre><code>import x # unimport:skip\n</code></pre> <pre><code>from x import ( # noqa\n  t, y,\n  f, r\n)\n</code></pre> <p>If version of your python is 3.8+ Unimport support multiple skip like below. It doesn\u2019t matter which line you put the comment on.</p> <pre><code>from package import (\n    module,\n    module1,\n)  # unimport:skip\n</code></pre> <p>or</p> <pre><code>from package import (\n    module, # unimport:skip\n    module1,\n)\n</code></pre>"},{"location":"tutorial/other-useful-features/#file-wide-skips","title":"File Wide Skips","text":"<p>To skip a file by typing <code># unimport: skip_file</code> anywhere in that file for example:</p> <pre><code># unimport: skip_file\n\nimport x\n</code></pre> <p>or</p> <pre><code>import x\n\n# unimport: skip_file\n</code></pre>"},{"location":"tutorial/other-useful-features/#exit-code-behavior","title":"Exit code behavior","text":"<p>Exit code 1 if there is a syntax error Exit code 0 if unused import versa and auto removed for all other cases exit code 1 Exit code 0 if there is no unused import.</p>"},{"location":"tutorial/supported-behaviors/","title":"Supported behaviors","text":""},{"location":"tutorial/supported-behaviors/#typing","title":"Typing","text":"<p>Unimport can understand that imports are used these cases.</p> <pre><code>from typing import List, Dict\ndef test(arg: List[Dict]) -&gt; None:\n   pass\n</code></pre>"},{"location":"tutorial/supported-behaviors/#string","title":"String","text":"<p>Unimport supports the following cases</p> <pre><code>from typing import List, Dict\ndef test(arg: 'List[Dict]') -&gt; None:\n   pass\n</code></pre> <pre><code>from typing import List, Dict\ndef test(arg: \"List['Dict']\") -&gt; None:\n   pass\n</code></pre>"},{"location":"tutorial/supported-behaviors/#comments","title":"Comments","text":"<p>This feature is only available for python 3.8.</p> <p>Imports in the example below aren\u2019t flag as unused by import.</p> <pre><code>from typing import Any\nfrom typing import Tuple\nfrom typing import Union\ndef function(a, b):\n    # type: (Any, str) -&gt; Union[Tuple[None, None], Tuple[str, str]]\n    pass\n</code></pre> <p>For more information</p> <p>PEP 526 - Syntax for Variable Annotations</p>"},{"location":"tutorial/supported-behaviors/#all","title":"All","text":"<p>Unimport looks at the items in the <code>__all__</code> list, if it matches the imports, marks it as being used.</p> <pre><code>import os\n\n__all__ = [\"os\"] # this import is used and umimport can understand\n</code></pre> <p>Other supported operations, append and extend</p> <pre><code>from os import *\n\n__all__ = []\n__all__.append(\"removedirs\")\n__all__.extend([\"walk\"])\n</code></pre> <p>after refactoring</p> <pre><code>from os import removedirs, walk\n\n__all__ = []\n__all__.append(\"removedirs\")\n__all__.extend([\"walk\"])\n</code></pre>"},{"location":"tutorial/supported-behaviors/#scope","title":"Scope","text":"<p>Unimport tries to better understand whether the import is unused by performing scope analysis.</p> <p>Let me give a few examples.</p> <p>input</p> <pre><code>import x\n\ndef func():\n    import x\n\n    def inner():\n        import x\n        x\n</code></pre> <p>output</p> <pre><code>def func():\n\n    def inner():\n        import x\n        x\n</code></pre> <p>input</p> <pre><code>import x\n\nclass Klass:\n\n  def f(self):\n      import x\n\n      def ff():\n        import x\n\n        x\n</code></pre> <p>output</p> <pre><code>class Klass:\n\n  def f(self):\n\n      def ff():\n        import x\n\n        x\n</code></pre>"},{"location":"tutorial/use-with-docker/","title":"Use with docker","text":"<p>Install from the command line:</p> <p>To use the stable</p> <pre><code>$ docker pull ghcr.io/hakancelikdev/unimport:stable\n</code></pre> <p>To use the other versions</p> <pre><code>$ docker pull ghcr.io/hakancelikdev/unimport:{version_number}\n</code></pre> <p>Usage:</p> <pre><code>$ docker run -v {your_project_path}:/opt/workspace -it ghcr.io/hakancelikdev/unimport:latest /opt/workspace/ {other_arguments}\n</code></pre> <p>For more information see: https://github.com/hakancelikdev/unimport/pkgs/container/unimport</p>"},{"location":"tutorial/use-with-github-action/","title":"Use with github action","text":"<p>You can use stable version</p> <pre><code>name: Unimport\non: [push, pull_request]\njobs:\nlint:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v3.5.3\n- uses: actions/setup-python@v4.6.1\n- name: Check unused imports\nuses: hakancelikdev/unimport@stable\nwith:\nextra_args: --include src/\n</code></pre> <p>or you can use a specific version if you want.</p> <pre><code>name: Unimport\non: [push, pull_request]\njobs:\nlint:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v3.5.3\n- uses: actions/setup-python@v4.6.1\n- name: Check unused imports\nuses: hakancelikdev/unimport@1.0.1\nwith:\nextra_args: --include src/\n</code></pre>"},{"location":"tutorial/use-with-pre-commit/","title":"Use with pre commit","text":"<p>Once you have pre-commit installed, adding pre-commit plugins to your project is done with the .pre-commit-config.yaml configuration file.</p> <p>Add a file called .pre-commit-config.yaml to the root of your project. The pre-commit config file describes what repositories and hooks are installed.</p> <pre><code>repos:\n- repo: https://github.com/hakancelikdev/unimport\nrev: stable\nhooks:\n- id: unimport\nargs:\n- --include-star-import\n- --ignore-init\n- --gitignore\n</code></pre>"}]}